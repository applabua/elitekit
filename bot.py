import logging
import asyncio
from datetime import datetime
import nest_asyncio

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# =======================
#  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# =======================
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

nest_asyncio.apply()

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∞
BOT_TOKEN = "8184346238:AAGe8YPi4MoT3kdWHWf-Ay1IwCMNlegFkAw"
ADMIN_ID = 2045410830

# üîÅ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_SIZE, CHOOSING_QUANTITY, ENTER_LOCATION, ENTER_PHONE, CONFIRM_ORDER, WAIT_CONFIRMATION = range(6)

# üñºÔ∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –ö–í–ê–õ–ò–¢–ï–¢–ù–´–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
# –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ?quality=100 (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º) –∏ –∏—Å–∫–ª—é—á–µ–Ω–∞ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
PHOTOS = [
    "https://i.ibb.co/Kjr4hxKF/LACOSTE-5.png?quality=100",
    "https://i.ibb.co/9k2R8sp5/LACOSTE-4.png?quality=100",
    "https://i.ibb.co/spVJwPsg/LACOSTE-3.png?quality=100",
    "https://i.ibb.co/XZhmp1ff/LACOSTE-1.png?quality=100",
    "https://i.ibb.co/JwgVgV2D/LACOSTE.png?quality=100",
]

# üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
SIZES = ["S", "M", "L", "XL", "XXL", "XXXL"]

# ===========================
#       –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê
# ===========================

# /start ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º–∞, –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–æ–≤–∏—Ç–∏"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    
    user = update.effective_user
    username = user.username or "–Ω–µ–º–∞—î –Ω—ñ–∫–∞"
    user_id = user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º
    media = [InputMediaPhoto(media=url) for url in PHOTOS]
    await update.message.reply_media_group(media=media)
    
    # –ö—Ä–∞—Ç–∫–æ–µ, –Ω–æ —ë–º–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫,
    # —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∏ –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ.
    description = (
        "ü´° <b>–§—É—Ç–±–æ–ª–∫–∞-–ø–æ–ª–æ –ó–°–£ (–û–ª–∏–≤–∞)</b>\n"
        "(–°—Ç–∞—Ç—É—Ç–Ω–æ–≥–æ –∑—Ä–∞–∑–∫—É)\n"
        "–í–∏—Ä–æ–±–ª–µ–Ω–∞ –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É,\n"
        "—â–æ –≥–∞—Ä–∞–Ω—Ç—É—î –∫–æ–º—Ñ–æ—Ä—Ç —Ç–∞ –∑–Ω–æ—Å–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å.\n"
        "üîπ <i>–¢–∫–∞–Ω–∏–Ω–∞ Lacoste:</i> –¥–∏—Ö–∞—é—á–∞, –≥—ñ–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–∞\n"
        "üîπ –Ü–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ—Å—ñ–Ω–Ω—è\n"
        "üîπ –õ–µ–≥–∫–∞ —Ç–∞ –∑—Ä—É—á–Ω–∞\n"
        "üîπ –ó–Ω–æ—Å–æ—Å—Ç—ñ–π–∫–∞\n"
        "üîπ –í–∏—Ä–æ–±–ª–µ–Ω–æ –≤ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶\n\n"
        "üí∞ <b>–¶—ñ–Ω–∞: 950 –≥—Ä–Ω/—à—Ç</b>\n"
        "‚ö†Ô∏è –ü—Ä–∏–π–º–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ª–∏—à–µ –ø—ñ—Å–ª—è\n"
        "   100% –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏."
    )
    await update.message.reply_text(text=description, parse_mode="HTML")
    
    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–º–æ–≤–∏—Ç–∏"
    keyboard = [[InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")]]
    await update.message.reply_text(
        text="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ ‚Äî –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
async def order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.callback_query.answer()
    
    user = update.effective_user
    username = user.username or "–Ω–µ–º–∞—î –Ω—ñ–∫–∞"
    user_id = user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ–≤–∏—Ç–∏'.")
    
    # –í—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤
    keyboard = [[InlineKeyboardButton(size, callback_data=size)] for size in SIZES]
    await update.callback_query.message.reply_text(
        text="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_SIZE

# –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
async def size_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data["size"] = update.callback_query.data
    await update.callback_query.message.reply_text(text="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—É—Ç–±–æ–ª–æ–∫:")
    return CHOOSING_QUANTITY

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def quantity_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["quantity"] = update.message.text
    await update.message.reply_text(
        text="–í–≤–µ–¥—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å, –º—ñ—Å—Ç–æ —Ç–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –∞–±–æ –£–∫—Ä–ø–æ—à—Ç–∏:"
    )
    return ENTER_LOCATION

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def location_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = update.message.text
    await update.message.reply_text(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return ENTER_PHONE

# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text(text="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return CONFIRM_ORDER

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ –≤—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    data = context.user_data
    
    summary = (
        "üßæ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
        f"üëï –†–æ–∑–º—ñ—Ä: {data['size']}\n"
        f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {data['quantity']}\n"
        f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {data['location']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üë§ –Ü–º'—è: {data['name']}\n"
        "üí≥ –û–ø–ª–∞—Ç–∞: 950 –≥—Ä–Ω/—à—Ç\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
    )
    buttons = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    await update.message.reply_text(
        text=summary,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return WAIT_CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user = update.effective_user
    username = user.username or "–Ω–µ–º–∞—î –Ω—ñ–∫–∞"
    user_id = user.id
    data = context.user_data
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    message = (
        "üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\n"
        f"üë§ @{username} ({user_id})\n"
        f"‚è∞ {now} (–∑–∞ –ö–∏—î–≤–æ–º)\n\n"
        f"–†–æ–∑–º—ñ—Ä: {data['size']}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {data['quantity']}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data['location']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–Ü–º'—è: {data['name']}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)
    
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞–∫–∞–∑: "
        f"size={data['size']}, quantity={data['quantity']}, location={data['location']}"
    )
    
    await update.callback_query.message.reply_text(
        text="‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ üìû"
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user = update.effective_user
    username = user.username or "–Ω–µ–º–∞—î –Ω—ñ–∫–∞"
    user_id = user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    
    await update.callback_query.message.reply_text(text="‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ===========================
#     –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
# ===========================
async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(order_callback, pattern="^order$")],
        states={
            CHOOSING_SIZE: [CallbackQueryHandler(size_chosen)],
            CHOOSING_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_entered)],
            ENTER_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_entered)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_entered)],
            CONFIRM_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
            WAIT_CONFIRMATION: [
                CallbackQueryHandler(confirm_callback, pattern="^confirm$"),
                CallbackQueryHandler(cancel_callback, pattern="^cancel$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_callback)],
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üü¢")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
